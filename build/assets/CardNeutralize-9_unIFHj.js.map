{"version":3,"file":"CardNeutralize-9_unIFHj.js","sources":["../../src/components/CardNeutralize.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport BaseCard from './BaseCard';\nimport { useSession } from '../context/SessionContext';\nimport contentSearchService from '../services/ContentSearchService';\nimport { Spinner, ErrorState } from './common';\n\nconst NeutralizeContainer = styled.div`\n  padding: 1rem;\n`;\n\nconst StepProgress = styled.div`\n  margin-bottom: 1.5rem;\n  text-align: center;\n`;\n\nconst ProgressBar = styled.div`\n  width: 100%;\n  height: 8px;\n  background: #e9ecef;\n  border-radius: 4px;\n  margin-top: 0.5rem;\n  overflow: hidden;\n`;\n\nconst ProgressFill = styled.div<{ width: number }>`\n  height: 100%;\n  background: #3498db;\n  width: ${props => props.width}%;\n  transition: width 0.3s ease;\n`;\n\nconst StepContainer = styled.div`\n  margin-bottom: 2rem;\n`;\n\nconst StepTitle = styled.h4`\n  color: #333;\n  margin-bottom: 0.5rem;\n`;\n\nconst StepInstruction = styled.p`\n  color: #666;\n  margin-bottom: 1rem;\n  line-height: 1.5;\n`;\n\nconst IntensitySlider = styled.div`\n  margin: 1rem 0;\n`;\n\nconst SliderInput = styled.input`\n  width: 100%;\n  margin: 0.5rem 0;\n`;\n\nconst SliderLabels = styled.div`\n  display: flex;\n  justify-content: space-between;\n  font-size: 0.875rem;\n  color: #666;\n`;\n\nconst TextInput = styled.div`\n  margin: 1rem 0;\n`;\n\nconst TextArea = styled.textarea`\n  width: 100%;\n  min-height: 80px;\n  padding: 0.75rem;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-family: inherit;\n  resize: vertical;\n  \n  &:focus {\n    outline: none;\n    border-color: #3498db;\n    box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.2);\n  }\n`;\n\nconst ActivitySelection = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 0.5rem;\n  margin: 1rem 0;\n`;\n\nconst ActivityOption = styled.button`\n  padding: 0.75rem;\n  background: #f8f9fa;\n  border: 1px solid #dee2e6;\n  border-radius: 4px;\n  cursor: pointer;\n  text-align: left;\n  transition: all 0.2s ease;\n\n  &:hover {\n    background: #e9ecef;\n    border-color: #adb5bd;\n  }\n`;\n\nconst StepSummary = styled.div`\n  background: #f8f9fa;\n  padding: 1rem;\n  border-radius: 4px;\n  margin-top: 1rem;\n\n  h5 {\n    margin: 0 0 0.5rem 0;\n    color: #495057;\n  }\n\n  ul {\n    margin: 0;\n    padding-left: 1.5rem;\n  }\n\n  li {\n    margin-bottom: 0.25rem;\n    color: #6c757d;\n  }\n`;\n\nconst ContinueButton = styled.button`\n  background: #3498db;\n  color: white;\n  border: none;\n  padding: 0.75rem 1.5rem;\n  border-radius: 4px;\n  cursor: pointer;\n  font-weight: 500;\n  transition: background 0.2s ease;\n\n  &:hover {\n    background: #2980b9;\n  }\n\n  &:disabled {\n    background: #adb5bd;\n    cursor: not-allowed;\n  }\n`;\n\ninterface NeutralizationStep {\n  id: number;\n  title: string;\n  instruction: string;\n  component: 'slider' | 'text' | 'select' | 'instruction';\n  options?: string[];\n  placeholder?: string;\n}\n\ninterface StepData {\n  initialCharge: number;\n  observerShiftComplete: boolean;\n  thirdPersonReword: string;\n  distractionActivity: string;\n  finalCharge: number;\n}\n\ninterface CardNeutralizeProps {\n  onComplete: () => void;\n}\n\nconst CardNeutralize = ({ onComplete }: CardNeutralizeProps) => {\n  const { canvasState, updateCanvasState } = useSession();\n  const [currentStep, setCurrentStep] = useState(1);\n  const [stepData, setStepData] = useState<StepData>({\n    initialCharge: 5,\n    observerShiftComplete: false,\n    thirdPersonReword: '',\n    distractionActivity: '',\n    finalCharge: 5\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n\n  const neutralizationSteps: NeutralizationStep[] = [\n    {\n      id: 1,\n      title: \"Name the Thought, Feel the Charge\",\n      instruction: \"Rate the emotional intensity of this thought (1-10):\",\n      component: \"slider\"\n    },\n    {\n      id: 2,\n      title: \"Observer Shift\",\n      instruction: \"Either say out loud to yourself or in your mind the thought in a voice that sounds monotone\",\n      component: \"instruction\"\n    },\n    {\n      id: 3,\n      title: \"Third-Person Reword\",\n      instruction: \"If this were a line in a novel describing someone else, how would the narrator phrase it?\",\n      component: \"text\",\n      placeholder: \"She is having the thought that people won't take her seriously...\"\n    },\n    {\n      id: 4,\n      title: \"Distract with Mildness\",\n      instruction: \"Choose a gentle distraction activity:\",\n      component: \"select\",\n      options: [\n        \"Describe the room you're in\",\n        \"Name colors around you\", \n        \"Describe the texture of your shirt\",\n        \"Count your breaths to 10\",\n        \"Pet your cat/dog\",\n        \"Other mindful activity\"\n      ]\n    },\n    {\n      id: 5,\n      title: \"Recheck the Charge\",\n      instruction: \"What number is it now? Even a drop from 7 to 5 means you've reclaimed energetic control:\",\n      component: \"slider\"\n    }\n  ];\n\n  const handleStepComplete = (stepId: number, value: any) => {\n    const stepKey = {\n      1: 'initialCharge',\n      2: 'observerShiftComplete', \n      3: 'thirdPersonReword',\n      4: 'distractionActivity',\n      5: 'finalCharge'\n    }[stepId] as keyof StepData;\n    \n    const newStepData = { ...stepData, [stepKey]: value };\n    setStepData(newStepData);\n    \n    if (stepId < 5) {\n      setCurrentStep(stepId + 1);\n    } else {\n      // Complete neutralization process\n      const chargeReduction = newStepData.initialCharge - value;\n      updateCanvasState({\n        miningResults: {\n          ...canvasState.miningResults,\n          neutralize: {\n            type: 'neutralize',\n            steps: newStepData,\n            chargeReduction,\n            timestamp: new Date().toISOString()\n          },\n        },\n      });\n      onComplete();\n    }\n  };\n\n  const currentStepConfig = neutralizationSteps[currentStep - 1];\n\n  return (\n    <BaseCard \n      title=\"Neutralize the Voice\" \n      onActivate={() => {}}\n      testId=\"card-neutralize\"\n      onSkip={() => {}}\n      aria-describedby=\"neutralize-description\"\n      aria-label=\"Neutralize the Voice\"\n      showActions={false}\n    >\n      <NeutralizeContainer>\n        <StepProgress>\n          <span>Step {currentStep} of 5</span>\n          <ProgressBar>\n            <ProgressFill width={(currentStep / 5) * 100} />\n          </ProgressBar>\n        </StepProgress>\n        \n        <StepContainer>\n          <StepTitle>{currentStepConfig.title}</StepTitle>\n          <StepInstruction>{currentStepConfig.instruction}</StepInstruction>\n          \n          {currentStepConfig.component === 'slider' && (\n            <IntensitySlider>\n              <SliderInput\n                type=\"range\"\n                min=\"1\"\n                max=\"10\"\n                value={stepData[currentStep === 1 ? 'initialCharge' : 'finalCharge']}\n                onChange={(e) => {\n                  const value = parseInt(e.target.value);\n                  const stepKey = currentStep === 1 ? 'initialCharge' : 'finalCharge';\n                  setStepData(prev => ({ ...prev, [stepKey]: value }));\n                }}\n                onMouseUp={(e) => handleStepComplete(currentStep, parseInt((e.target as HTMLInputElement).value))}\n                onTouchEnd={(e) => handleStepComplete(currentStep, parseInt((e.target as HTMLInputElement).value))}\n                data-testid={`neutralize-step-${currentStep}-slider`}\n              />\n              <SliderLabels>\n                <span>1 - Calm</span>\n                <span>10 - Overwhelming</span>\n              </SliderLabels>\n              <div style={{ textAlign: 'center', marginTop: '0.5rem', color: '#666' }}>\n                Current value: {stepData[currentStep === 1 ? 'initialCharge' : 'finalCharge']}\n              </div>\n            </IntensitySlider>\n          )}\n          \n          {currentStepConfig.component === 'text' && (\n            <TextInput>\n              <TextArea\n                placeholder={currentStepConfig.placeholder}\n                value={stepData.thirdPersonReword}\n                onChange={(e) => setStepData(prev => ({ \n                  ...prev, \n                  thirdPersonReword: e.target.value \n                }))}\n                data-testid={`neutralize-step-${currentStep}-text`}\n              />\n              <ContinueButton \n                onClick={() => handleStepComplete(currentStep, stepData.thirdPersonReword)}\n                disabled={!stepData.thirdPersonReword.trim()}\n              >\n                Continue\n              </ContinueButton>\n            </TextInput>\n          )}\n\n          {currentStepConfig.component === 'instruction' && (\n            <div style={{ margin: '1rem 0' }}>\n              <div style={{ \n                background: '#f8f9fa', \n                padding: '1rem', \n                borderRadius: '4px', \n                marginBottom: '1rem',\n                borderLeft: '4px solid #3498db'\n              }}>\n                <p style={{ margin: 0, fontStyle: 'italic' }}>\n                  Have the user prepend the phrase \"My mind just produced the thought...\" (in a monotone) and speak/hear it once more.\n                </p>\n              </div>\n              <ContinueButton \n                onClick={() => handleStepComplete(currentStep, true)}\n              >\n                I've Done This Step\n              </ContinueButton>\n            </div>\n          )}\n          \n          {currentStepConfig.component === 'select' && (\n            <ActivitySelection>\n              {currentStepConfig.options?.map((option, index) => (\n                <ActivityOption\n                  key={index}\n                  onClick={() => handleStepComplete(currentStep, option)}\n                  data-testid={`neutralize-step-${currentStep}-option-${index}`}\n                >\n                  {option}\n                </ActivityOption>\n              ))}\n            </ActivitySelection>\n          )}\n        </StepContainer>\n        \n        {currentStep > 1 && (\n          <StepSummary>\n            <h5>Progress so far:</h5>\n            <ul>\n              {currentStep > 1 && <li>Initial charge: {stepData.initialCharge}/10</li>}\n              {currentStep > 2 && <li>Observer shift: Completed</li>}\n              {currentStep > 3 && <li>Third-person reword: \"{stepData.thirdPersonReword}\"</li>}\n              {currentStep > 4 && <li>Distraction: {stepData.distractionActivity}</li>}\n            </ul>\n          </StepSummary>\n        )}\n      </NeutralizeContainer>\n    </BaseCard>\n  );\n};\n\nexport default CardNeutralize;\n"],"names":["NeutralizeContainer","styled","StepProgress","ProgressBar","ProgressFill","props","StepContainer","StepTitle","StepInstruction","IntensitySlider","SliderInput","SliderLabels","TextInput","TextArea","ActivitySelection","ActivityOption","StepSummary","ContinueButton","CardNeutralize","onComplete","canvasState","updateCanvasState","useSession","currentStep","setCurrentStep","useState","stepData","setStepData","loading","setLoading","error","setError","neutralizationSteps","handleStepComplete","stepId","value","stepKey","newStepData","chargeReduction","currentStepConfig","jsx","BaseCard","jsxs","e","prev","option","index"],"mappings":"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"}