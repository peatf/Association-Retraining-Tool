{"version":3,"file":"CardDataExtraction-B4pv8zXG.js","sources":["../../src/components/CardDataExtraction.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport BaseCard from './BaseCard';\nimport { useSession } from '../context/SessionContext';\nimport contentSearchService from '../services/ContentSearchService';\nimport { Spinner, ErrorState } from './common';\n\nconst ExtractionContainer = styled.div`\n  padding: 1rem;\n`;\n\nconst CardInstruction = styled.p`\n  color: #666;\n  margin-bottom: 1.5rem;\n  line-height: 1.5;\n`;\n\nconst EitherOrPrompt = styled.div`\n  margin-bottom: 2rem;\n  padding: 1rem;\n  background: #f8f9fa;\n  border-radius: 8px;\n`;\n\nconst PromptQuestion = styled.p`\n  font-weight: 500;\n  color: #333;\n  margin-bottom: 1rem;\n  line-height: 1.4;\n`;\n\nconst EitherOrOptions = styled.div`\n  display: flex;\n  gap: 1rem;\n  flex-wrap: wrap;\n`;\n\nconst OptionButton = styled.button<{ selected?: boolean; optionType: 'A' | 'B' }>`\n  flex: 1;\n  min-width: 200px;\n  padding: 1rem;\n  background: ${props => props.selected \n    ? (props.optionType === 'A' ? '#e3f2fd' : '#f3e5f5')\n    : '#ffffff'};\n  border: 2px solid ${props => props.selected \n    ? (props.optionType === 'A' ? '#2196f3' : '#9c27b0')\n    : '#dee2e6'};\n  border-radius: 8px;\n  cursor: pointer;\n  text-align: left;\n  line-height: 1.4;\n  transition: all 0.2s ease;\n  position: relative;\n\n  &:hover {\n    border-color: ${props => props.optionType === 'A' ? '#2196f3' : '#9c27b0'};\n    background: ${props => props.optionType === 'A' ? '#e3f2fd' : '#f3e5f5'};\n  }\n\n  &::before {\n    content: '${props => props.optionType}';\n    position: absolute;\n    top: 0.5rem;\n    right: 0.5rem;\n    width: 24px;\n    height: 24px;\n    background: ${props => props.optionType === 'A' ? '#2196f3' : '#9c27b0'};\n    color: white;\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 0.75rem;\n    font-weight: bold;\n    opacity: ${props => props.selected ? 1 : 0.3};\n  }\n`;\n\nconst ExtractionSummary = styled.div`\n  background: #f8f9fa;\n  padding: 1rem;\n  border-radius: 8px;\n  margin-top: 1.5rem;\n\n  h4 {\n    margin: 0 0 1rem 0;\n    color: #495057;\n  }\n\n  ul {\n    margin: 0;\n    padding-left: 0;\n    list-style: none;\n  }\n\n  li {\n    margin-bottom: 1rem;\n    padding: 0.75rem;\n    background: white;\n    border-radius: 4px;\n    border-left: 4px solid #dee2e6;\n  }\n\n  strong {\n    display: block;\n    margin-bottom: 0.25rem;\n    color: #333;\n  }\n`;\n\nconst CompletionSection = styled.div`\n  text-align: center;\n  margin-top: 1.5rem;\n`;\n\nconst CompleteButton = styled.button`\n  background: #28a745;\n  color: white;\n  border: none;\n  padding: 0.75rem 2rem;\n  border-radius: 8px;\n  cursor: pointer;\n  font-weight: 500;\n  font-size: 1rem;\n  transition: background 0.2s ease;\n\n  &:hover {\n    background: #218838;\n  }\n`;\n\nconst ThankYouContent = styled.div`\n  text-align: center;\n`;\n\nconst GratitudeSection = styled.div`\n  margin-bottom: 2rem;\n  padding: 1.5rem;\n  background: #e8f5e8;\n  border-radius: 8px;\n\n  h4 {\n    color: #2d5a2d;\n    margin-bottom: 1rem;\n  }\n`;\n\nconst GratitudeMessage = styled.p`\n  font-style: italic;\n  color: #2d5a2d;\n  font-size: 1.1rem;\n  line-height: 1.5;\n  margin: 0;\n`;\n\nconst NewJobSection = styled.div`\n  h4 {\n    color: #333;\n    margin-bottom: 1rem;\n  }\n\n  p {\n    color: #666;\n    margin-bottom: 1.5rem;\n  }\n`;\n\nconst JobOptions = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 0.75rem;\n  margin-bottom: 1.5rem;\n`;\n\nconst JobOption = styled.button`\n  padding: 1rem;\n  background: #f8f9fa;\n  border: 1px solid #dee2e6;\n  border-radius: 8px;\n  cursor: pointer;\n  text-align: left;\n  line-height: 1.4;\n  transition: all 0.2s ease;\n\n  &:hover {\n    background: #e9ecef;\n    border-color: #adb5bd;\n  }\n`;\n\nconst CustomJob = styled.div`\n  p {\n    margin-bottom: 0.5rem;\n    text-align: left;\n  }\n`;\n\nconst CustomJobInput = styled.textarea`\n  width: 100%;\n  min-height: 80px;\n  padding: 0.75rem;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-family: inherit;\n  resize: vertical;\n`;\n\ninterface EitherOrPrompt {\n  question: string;\n  optionA: string;\n  optionB: string;\n}\n\ninterface Response {\n  choice: 'A' | 'B';\n  text: string;\n  question: string;\n}\n\ninterface CardDataExtractionProps {\n  onComplete: () => void;\n}\n\nconst CardDataExtraction = ({ onComplete }: CardDataExtractionProps) => {\n  const { canvasState, updateCanvasState } = useSession();\n  const [eitherOrPrompts, setEitherOrPrompts] = useState<EitherOrPrompt[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<Error | null>(null);\n  const [responses, setResponses] = useState<Record<number, Response>>({});\n  const [showThankYou, setShowThankYou] = useState(false);\n  const [newJobOptions, setNewJobOptions] = useState<string[]>([]);\n\n  useEffect(() => {\n    const loadDataExtractionPrompts = async () => {\n      try {\n        setLoading(true);\n        const structuredPrompts = await contentSearchService.getEitherOrPrompts(\n          canvasState.selectedTopic || ''\n        );\n        \n        setEitherOrPrompts(structuredPrompts);\n        setError(null);\n      } catch (err) {\n        setError(err as Error);\n        console.error('Error loading data extraction prompts:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (canvasState.selectedTopic) {\n      loadDataExtractionPrompts();\n    }\n  }, [canvasState.selectedTopic]);\n\n  const handleResponse = (promptIndex: number, choice: 'A' | 'B', choiceText: string) => {\n    setResponses(prev => ({\n      ...prev,\n      [promptIndex]: {\n        choice,\n        text: choiceText,\n        question: eitherOrPrompts[promptIndex].question\n      }\n    }));\n  };\n\n  const handleAllQuestionsComplete = () => {\n    // Generate new job options based on extracted data\n    const extractedInsights = Object.values(responses);\n    generateNewJobOptions(extractedInsights);\n    setShowThankYou(true);\n  };\n\n  const generateNewJobOptions = async (insights: Response[]) => {\n    try {\n      // Use AI to generate alternative \"jobs\" for the thought based on insights\n      // For now, provide fallback options based on topic\n      const topicJobOptions = {\n        'Self-Image': [\n          \"Remind me to check in with my values before making decisions\",\n          \"Help me notice when I need to pause and practice self-compassion\",\n          \"Alert me to opportunities for celebrating small wins\"\n        ],\n        'Money': [\n          \"Help me pause and consider my true priorities before financial decisions\",\n          \"Remind me that my worth isn't measured by my bank account\",\n          \"Guide me to make choices from abundance rather than scarcity\"\n        ],\n        'Relationships': [\n          \"Help me communicate my needs with clarity and kindness\",\n          \"Remind me to maintain healthy boundaries while staying open to connection\",\n          \"Guide me to respond from love rather than fear in conflicts\"\n        ]\n      };\n      \n      const defaultOptions = topicJobOptions[canvasState.selectedTopic as keyof typeof topicJobOptions] || [\n        \"Remind me to check in with my values before making decisions\",\n        \"Help me notice when I need to pause and breathe\",\n        \"Alert me to opportunities for self-compassion\"\n      ];\n      \n      setNewJobOptions(defaultOptions);\n    } catch (err) {\n      // Fallback job options\n      setNewJobOptions([\n        \"Remind me to check in with my values before making decisions\",\n        \"Help me notice when I need to pause and breathe\",\n        \"Alert me to opportunities for self-compassion\"\n      ]);\n    }\n  };\n\n  const handleJobSelection = (selectedJob: string) => {\n    updateCanvasState({\n      miningResults: {\n        ...canvasState.miningResults,\n        dataExtraction: {\n          type: 'dataExtraction',\n          responses,\n          extractedData: Object.values(responses),\n          thoughtThankYou: true,\n          newJob: selectedJob,\n          timestamp: new Date().toISOString()\n        },\n      },\n    });\n    onComplete();\n  };\n\n  const allQuestionsAnswered = Object.keys(responses).length === eitherOrPrompts.length;\n\n  if (loading) {\n    return <Spinner message=\"Loading extraction prompts...\" />;\n  }\n\n  if (error) {\n    return <ErrorState title=\"Error loading prompts\" message={error.message} aria-label=\"Error loading prompts\" />;\n  }\n\n  if (showThankYou) {\n    return (\n      <BaseCard\n        title=\"Thank the Thought & Offer New Job\"\n        testId=\"card-data-extraction-thankyou\"\n        showActions={false}\n      >\n        <ThankYouContent>\n          <GratitudeSection>\n            <h4>Thank the Thought (Genuinely)</h4>\n            <GratitudeMessage>\n              \"I see you were trying to help. You're not the enemy. \n              You showed up when I needed some kind of safety.\"\n            </GratitudeMessage>\n          </GratitudeSection>\n          \n          <NewJobSection>\n            <h4>Offer an Updated Job</h4>\n            <p>Based on what we learned, here are some new roles this thought could play:</p>\n            \n            <JobOptions>\n              {newJobOptions.map((job, index) => (\n                <JobOption\n                  key={index}\n                  onClick={() => handleJobSelection(job)}\n                  data-testid={`new-job-option-${index}`}\n                >\n                  {job}\n                </JobOption>\n              ))}\n            </JobOptions>\n            \n            <CustomJob>\n              <p>Or create your own:</p>\n              <CustomJobInput\n                placeholder=\"What new job would you like to offer this thought?\"\n                onBlur={(e) => {\n                  if (e.target.value.trim()) {\n                    handleJobSelection(e.target.value.trim());\n                  }\n                }}\n                data-testid=\"custom-job-input\"\n              />\n            </CustomJob>\n          </NewJobSection>\n        </ThankYouContent>\n      </BaseCard>\n    );\n  }\n\n  return (\n    <BaseCard\n      title=\"Extract Core Data\"\n      testId=\"card-data-extraction\"\n      showActions={false}\n    >\n      <ExtractionContainer>\n        <CardInstruction>\n          Answer these either/or questions to mine your thought for its core message:\n        </CardInstruction>\n        \n        <div>\n          {eitherOrPrompts.map((promptPair, index) => (\n            <EitherOrPrompt key={index}>\n              <PromptQuestion>{promptPair.question}</PromptQuestion>\n              <EitherOrOptions>\n                <OptionButton\n                  optionType=\"A\"\n                  selected={responses[index]?.choice === 'A'}\n                  onClick={() => handleResponse(index, 'A', promptPair.optionA)}\n                  data-testid={`extraction-option-${index}-a`}\n                >\n                  {promptPair.optionA}\n                </OptionButton>\n                <OptionButton\n                  optionType=\"B\"\n                  selected={responses[index]?.choice === 'B'}\n                  onClick={() => handleResponse(index, 'B', promptPair.optionB)}\n                  data-testid={`extraction-option-${index}-b`}\n                >\n                  {promptPair.optionB}\n                </OptionButton>\n              </EitherOrOptions>\n            </EitherOrPrompt>\n          ))}\n        </div>\n        \n        {Object.keys(responses).length > 0 && (\n          <ExtractionSummary>\n            <h4>Your Insights So Far:</h4>\n            <ul>\n              {Object.values(responses).map((response, index) => (\n                <li key={index}>\n                  <strong>Q:</strong> {response.question}<br/>\n                  <strong>A:</strong> {response.text}\n                </li>\n              ))}\n            </ul>\n          </ExtractionSummary>\n        )}\n        \n        {allQuestionsAnswered && (\n          <CompletionSection>\n            <CompleteButton\n              onClick={handleAllQuestionsComplete}\n              data-testid=\"complete-data-extraction\"\n            >\n              Thank the Thought & Continue\n            </CompleteButton>\n          </CompletionSection>\n        )}\n      </ExtractionContainer>\n    </BaseCard>\n  );\n};\n\nexport default CardDataExtraction;\n"],"names":["ExtractionContainer","styled","CardInstruction","EitherOrPrompt","PromptQuestion","EitherOrOptions","OptionButton","props","ExtractionSummary","CompletionSection","CompleteButton","ThankYouContent","GratitudeSection","GratitudeMessage","NewJobSection","JobOptions","JobOption","CustomJob","CustomJobInput","CardDataExtraction","onComplete","canvasState","updateCanvasState","useSession","eitherOrPrompts","setEitherOrPrompts","useState","loading","setLoading","error","setError","responses","setResponses","showThankYou","setShowThankYou","newJobOptions","setNewJobOptions","useEffect","loadDataExtractionPrompts","structuredPrompts","contentSearchService","err","handleResponse","promptIndex","choice","choiceText","prev","handleAllQuestionsComplete","generateNewJobOptions","insights","defaultOptions","handleJobSelection","selectedJob","allQuestionsAnswered","jsx","Spinner","ErrorState","BaseCard","jsxs","job","index","e","promptPair","response"],"mappings":"yFAOA,MAAMA,EAAsBC,EAAO;AAAA;AAAA,EAI7BC,EAAkBD,EAAO;AAAA;AAAA;AAAA;AAAA,EAMzBE,EAAiBF,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA,EAOxBG,EAAiBH,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA,EAOxBI,EAAkBJ,EAAO;AAAA;AAAA;AAAA;AAAA,EAMzBK,EAAeL,EAAO;AAAA;AAAA;AAAA;AAAA,gBAIZM,GAASA,EAAM,SACxBA,EAAM,aAAe,IAAM,UAAY,UACxC,SAAS;AAAA,sBACOA,GAASA,EAAM,SAC9BA,EAAM,aAAe,IAAM,UAAY,UACxC,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBASKA,GAASA,EAAM,aAAe,IAAM,UAAY,SAAS;AAAA,kBAC3DA,GAASA,EAAM,aAAe,IAAM,UAAY,SAAS;AAAA;AAAA;AAAA;AAAA,gBAI3DA,GAASA,EAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAMvBA,GAASA,EAAM,aAAe,IAAM,UAAY,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAQ5DA,GAASA,EAAM,SAAW,EAAI,EAAG;AAAA;AAAA,EAI1CC,EAAoBP,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgC3BQ,EAAoBR,EAAO;AAAA;AAAA;AAAA,EAK3BS,EAAiBT,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBxBU,EAAkBV,EAAO;AAAA;AAAA,EAIzBW,EAAmBX,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAY1BY,EAAmBZ,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQ1Ba,EAAgBb,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYvBc,EAAad,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA,EAOpBe,EAAYf,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBnBgB,EAAYhB,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA,EAOnBiB,EAAiBjB,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA0BxBkB,EAAqB,CAAC,CAAE,WAAAC,KAA0C,CACtE,KAAM,CAAE,YAAAC,EAAa,kBAAAC,CAAA,EAAsBC,EAAA,EACrC,CAACC,EAAiBC,CAAkB,EAAIC,EAAAA,SAA2B,CAAA,CAAE,EACrE,CAACC,EAASC,CAAU,EAAIF,EAAAA,SAAS,EAAI,EACrC,CAACG,EAAOC,CAAQ,EAAIJ,EAAAA,SAAuB,IAAI,EAC/C,CAACK,EAAWC,CAAY,EAAIN,EAAAA,SAAmC,CAAA,CAAE,EACjE,CAACO,EAAcC,CAAe,EAAIR,EAAAA,SAAS,EAAK,EAChD,CAACS,EAAeC,CAAgB,EAAIV,EAAAA,SAAmB,CAAA,CAAE,EAE/DW,EAAAA,UAAU,IAAM,CACd,MAAMC,EAA4B,SAAY,CAC5C,GAAI,CACFV,EAAW,EAAI,EACf,MAAMW,EAAoB,MAAMC,EAAqB,mBACnDnB,EAAY,eAAiB,EAAA,EAG/BI,EAAmBc,CAAiB,EACpCT,EAAS,IAAI,CACf,OAASW,EAAK,CACZX,EAASW,CAAY,EACrB,QAAQ,MAAM,yCAA0CA,CAAG,CAC7D,QAAA,CACEb,EAAW,EAAK,CAClB,CACF,EAEIP,EAAY,eACdiB,EAAA,CAEJ,EAAG,CAACjB,EAAY,aAAa,CAAC,EAE9B,MAAMqB,EAAiB,CAACC,EAAqBC,EAAmBC,IAAuB,CACrFb,EAAac,IAAS,CACpB,GAAGA,EACH,CAACH,CAAW,EAAG,CACb,OAAAC,EACA,KAAMC,EACN,SAAUrB,EAAgBmB,CAAW,EAAE,QAAA,CACzC,EACA,CACJ,EAEMI,EAA6B,IAAM,CAEb,OAAO,OAAOhB,CAAS,EACjDiB,EAAuC,EACvCd,EAAgB,EAAI,CACtB,EAEMc,EAAwB,MAAOC,GAAyB,CAC5D,GAAI,CAqBF,MAAMC,EAlBkB,CACtB,aAAc,CACZ,+DACA,mEACA,sDAAA,EAEF,MAAS,CACP,2EACA,4DACA,8DAAA,EAEF,cAAiB,CACf,yDACA,4EACA,6DAAA,CACF,EAGqC7B,EAAY,aAA6C,GAAK,CACnG,+DACA,kDACA,+CAAA,EAGFe,EAAiBc,CAAc,CACjC,MAAc,CAEZd,EAAiB,CACf,+DACA,kDACA,+CAAA,CACD,CACH,CACF,EAEMe,EAAsBC,GAAwB,CAClD9B,EAAkB,CAChB,cAAe,CACb,GAAGD,EAAY,cACf,eAAgB,CACd,KAAM,iBACN,UAAAU,EACA,cAAe,OAAO,OAAOA,CAAS,EACtC,gBAAiB,GACjB,OAAQqB,EACR,UAAW,IAAI,KAAA,EAAO,YAAA,CAAY,CACpC,CACF,CACD,EACDhC,EAAA,CACF,EAEMiC,EAAuB,OAAO,KAAKtB,CAAS,EAAE,SAAWP,EAAgB,OAE/E,OAAIG,EACK2B,EAAAA,IAACC,EAAA,CAAQ,QAAQ,+BAAA,CAAgC,EAGtD1B,EACKyB,MAACE,GAAW,MAAM,wBAAwB,QAAS3B,EAAM,QAAS,aAAW,wBAAwB,EAG1GI,EAEAqB,EAAAA,IAACG,EAAA,CACC,MAAM,oCACN,OAAO,gCACP,YAAa,GAEb,gBAAC9C,EAAA,CACC,SAAA,CAAA+C,OAAC9C,EAAA,CACC,SAAA,CAAA0C,EAAAA,IAAC,MAAG,SAAA,+BAAA,CAA6B,EACjCA,EAAAA,IAACzC,GAAiB,SAAA,yGAAA,CAGlB,CAAA,EACF,SAECC,EAAA,CACC,SAAA,CAAAwC,EAAAA,IAAC,MAAG,SAAA,sBAAA,CAAoB,EACxBA,EAAAA,IAAC,KAAE,SAAA,4EAAA,CAA0E,QAE5EvC,EAAA,CACE,SAAAoB,EAAc,IAAI,CAACwB,EAAKC,IACvBN,EAAAA,IAACtC,EAAA,CAEC,QAAS,IAAMmC,EAAmBQ,CAAG,EACrC,cAAa,kBAAkBC,CAAK,GAEnC,SAAAD,CAAA,EAJIC,CAAA,CAMR,EACH,SAEC3C,EAAA,CACC,SAAA,CAAAqC,EAAAA,IAAC,KAAE,SAAA,qBAAA,CAAmB,EACtBA,EAAAA,IAACpC,EAAA,CACC,YAAY,qDACZ,OAAS2C,GAAM,CACTA,EAAE,OAAO,MAAM,KAAA,GACjBV,EAAmBU,EAAE,OAAO,MAAM,KAAA,CAAM,CAE5C,EACA,cAAY,kBAAA,CAAA,CACd,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CAAA,EAMJP,EAAAA,IAACG,EAAA,CACC,MAAM,oBACN,OAAO,uBACP,YAAa,GAEb,gBAACzD,EAAA,CACC,SAAA,CAAAsD,EAAAA,IAACpD,GAAgB,SAAA,6EAAA,CAEjB,EAEAoD,EAAAA,IAAC,OACE,SAAA9B,EAAgB,IAAI,CAACsC,EAAYF,WAC/BzD,EAAA,CACC,SAAA,CAAAmD,EAAAA,IAAClD,EAAA,CAAgB,WAAW,QAAA,CAAS,SACpCC,EAAA,CACC,SAAA,CAAAiD,EAAAA,IAAChD,EAAA,CACC,WAAW,IACX,SAAUyB,EAAU6B,CAAK,GAAG,SAAW,IACvC,QAAS,IAAMlB,EAAekB,EAAO,IAAKE,EAAW,OAAO,EAC5D,cAAa,qBAAqBF,CAAK,KAEtC,SAAAE,EAAW,OAAA,CAAA,EAEdR,EAAAA,IAAChD,EAAA,CACC,WAAW,IACX,SAAUyB,EAAU6B,CAAK,GAAG,SAAW,IACvC,QAAS,IAAMlB,EAAekB,EAAO,IAAKE,EAAW,OAAO,EAC5D,cAAa,qBAAqBF,CAAK,KAEtC,SAAAE,EAAW,OAAA,CAAA,CACd,CAAA,CACF,CAAA,GAnBmBF,CAoBrB,CACD,EACH,EAEC,OAAO,KAAK7B,CAAS,EAAE,OAAS,UAC9BvB,EAAA,CACC,SAAA,CAAA8C,EAAAA,IAAC,MAAG,SAAA,uBAAA,CAAqB,EACzBA,EAAAA,IAAC,KAAA,CACE,SAAA,OAAO,OAAOvB,CAAS,EAAE,IAAI,CAACgC,EAAUH,IACvCF,EAAAA,KAAC,KAAA,CACC,SAAA,CAAAJ,EAAAA,IAAC,UAAO,SAAA,IAAA,CAAE,EAAS,IAAES,EAAS,eAAU,KAAA,EAAE,EAC1CT,EAAAA,IAAC,UAAO,SAAA,IAAA,CAAE,EAAS,IAAES,EAAS,IAAA,CAAA,EAFvBH,CAGT,CACD,CAAA,CACH,CAAA,EACF,EAGDP,SACE5C,EAAA,CACC,SAAA6C,EAAAA,IAAC5C,EAAA,CACC,QAASqC,EACT,cAAY,2BACb,SAAA,8BAAA,CAAA,CAED,CACF,CAAA,CAAA,CAEJ,CAAA,CAAA,CAGN"}